# -*- coding: utf-8 -*-
"""Exercícios (Matrizes).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IgsmbcI63tX1AeHEg4BT0J-h0bzAJXPd
"""

import random

matriz_a = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
matriz_b = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]

for i in range(3):
  for j in range(3):
    matriz_a[i][j] = random.randint(1, 10)
    matriz_b[i][j] = random.randint(1, 10)

print()
print(matriz_a[0])
print(matriz_a[1])
print(matriz_a[2])
print()
print(matriz_b[0])
print(matriz_b[1])
print(matriz_b[2])

soma_a = matriz_a[1][0] + matriz_a[2][0] + matriz_a[2][1]
soma_b = matriz_b[0][1] + matriz_b[0][2] + matriz_b[1][2]

print()
print(soma_a)
print(soma_b)

import numpy as np

matriz_a = np.random.randint(10, size = (3, 3))

print(matriz_a)

det = np.linalg.det(matriz_a)

print(det)

"""Uma pista de kart permite 10 voltas para cada um de 6 corredores. Faça um programa que defina aleatoriamente os tempos (em segundos) de cada volta de cada corredor. Ao final o programa deve informar:

- De quem foi a melhor volta e em que volta;
- Classificação final em ordem crescente;
- Quem foi o vencedor.
"""

import numpy as np

num_voltas = 10
num_corredores = 6

tempos = np.random.randint(80, 121, size = (num_corredores, num_voltas))

# axis = 1 representa as linhas da matriz, axis = 0 representa as colunas da matriz.
tempos_totais = np.sum(tempos, axis = 1)

# 'np.argmin' retorna o menor número de cada linha (por conta do axis = 1) da varáivel 'tempos'.
melhor_volta_indices = np.argmin(tempos, axis = 1)

# 'np.arange' cria uma sequência de números de acordo com o número especificado. Neste caso, de 0 até 'num_corredores' = 6, 5 considerando o índice.
# E determina esses valores como o índice de cada linha da matriz 'tempos'.
# O uso da variável 'melhores_voltas_indices' é para identificar quais são os melhores tempos através do índice criado pelo 'np.range'.

melhores_tempos = tempos[np.arange(num_corredores), melhor_volta_indices]

# 'np.argsort' coloca em ordem os elementos de uma variável.
classificacao_final_indices = np.argsort(tempos_totais)
classificacao_final = classificacao_final_indices + 1

# Determinando o vencedor
vencedor_indice = np.argmin(tempos_totais)
vencedor = vencedor_indice + 1

print("Melhor volta de cada corredor:")
for i in range(num_corredores):
    print(f"Corredor {i + 1}: A melhor volta foi a {melhor_volta_indices[i] + 1} e o melhor tempo: {melhores_tempos[i]} segundos")

print("\nClassificação final:")

for posicao, corredor in enumerate(classificacao_final):
    print(f"{posicao + 1}º lugar: Corredor {corredor}")

print(f"\nO vencedor é o corredor {vencedor} com o tempo de {tempos_totais[vencedor_indice]} segundos.")

"""##Reescrever o exercício anterior utilizando a biblioteca Pandas"""

import numpy as np
import pandas as pd

num_voltas = 10
num_corredores = 6

# Criando a matriz 'tempos' com o Numpy
tempos = np.random.randint(0, 121, size = (num_corredores, num_voltas))

# Criando um Dataframe com a matriz 'tempos'
df = pd.DataFrame(tempos)

# Alterando os indices das colunas para a ordem certa
df = pd.DataFrame(tempos, columns = range(1, 11))

# Transformar os indices do Dataframe para os nomes dos corredores
df2 = df.rename(index = {0: 'Carlos', 1: 'Rafael', 2: 'Tomásia', 3: 'Alisson', 4: 'Jean', 5: 'Gabriela'})

df2

melhor_volta = df2.sum(axis = 1).sort_values()

melhor_volta

indice_melhor_volta = df2.idxmin(axis = 1)

print(indice_melhor_volta)

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator

num_voltas = 10
num_corredores = 6

tempos = np.random.randint(0, 121, size = (num_corredores, num_voltas))

df = pd.DataFrame(tempos)

df

dfacumulo = df.cumsum(axis = 1)

dfacumulo

df_transposed = dfacumulo.T

df_transposed

df2 = df_transposed.rename(columns = {0: 'Carlos', 1: 'Rafael', 2: 'Tomásia', 3: 'Alisson', 4: 'Jean', 5: 'Gabriela'})

df2

df2.plot()

plt.gca().yaxis.set_major_locator(MultipleLocator(50))
plt.gca().xaxis.set_major_locator(MultipleLocator(1))

plt.title('Gráfico de de tempos totais')
plt.ylabel('Tempo (segundos)')
plt.xlabel('Corredores')